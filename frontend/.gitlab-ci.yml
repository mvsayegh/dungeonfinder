stages:
  - build
  - publish
  - deploy

.build-application: &build-application
  stage: build
  image: node:18.19.1
  allow_failure: false
  script:
    - export CONFIGURATION="$ENVIRONMENT_BUILD"
    - node --max_old_space_size=8000 ./node_modules/@angular/cli/bin/ng build --configuration=$CONFIGURATION;
    - du -sh www/browser* | sort -hr
  when: manual

.build-artifacts: &build-artifacts
  name: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  paths:
    - www/browser

build-application:
  <<: *build-application
  before_script:
    - source .env.staging
    - yarn global add @angular/cli
    - yarn install
  except:
    - /^release.*$/
    - main
    - tags

build-staging-application:
  <<: *build-application
  before_script:
    - source .env.staging
    - yarn global add @angular/cli
    - yarn install
  artifacts: *build-artifacts
  only:
    - /^release.*$/

build-production-application:
  <<: *build-application
  before_script:
    - source .env.production
    - yarn global add @angular/cli
    - yarn install
  artifacts: *build-artifacts
  only:
    - main

.build-publish-docker-image: &build-publish-docker-image
  stage: publish
  image: docker:19.03.5
  allow_failure: false
  services:
    - docker:19.03.5-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - export BRANCH_NAME="${CI_COMMIT_BRANCH//\//-}"
    - export IMAGE_NAME="$DOCKERHUB_USER/$DOCKERHUB_REPOSITORY:${CI_PROJECT_NAME}-${BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
  script:
    - pwd
    - docker build -t $IMAGE_NAME .
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    - docker push $IMAGE_NAME

publish-staging-docker-image:
  <<: *build-publish-docker-image
  needs:
    - build-staging-application
  only:
    - /^release.*$/

publish-production-docker-image:
  <<: *build-publish-docker-image
  needs:
    - build-production-application
  only:
    - main

.deploy-application: &deploy-application
  stage: deploy
  image: docker:19.03.5
  allow_failure: false
  services:
    - docker:19.03.5-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - export BRANCH_NAME="${CI_COMMIT_BRANCH//\//-}"
    - export IMAGE_NAME="$DOCKERHUB_USER/$DOCKERHUB_REPOSITORY:$CI_PROJECT_NAME-$BRANCH_NAME-$CI_COMMIT_SHORT_SHA"
    - export DOCKER_CONTAINER="$CI_PROJECT_NAME-$BRANCH_NAME-$EXPOSE_PORT"
    - echo "IMAGE_NAME ${IMAGE_NAME}"
    - echo "BRANCH_NAME ${BRANCH_NAME}"
    - echo "EXPOSE_PORT ${EXPOSE_PORT}"
    - echo "DOCKER_CONTAINER ${DOCKER_CONTAINER}"

    - echo "removendo containers conflitantes na porta ${EXPOSE_PORT}..."
    - sshpass -p $DEPLOYMENT_PASSWORD ssh -oStrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "docker ps -f 'name=-${EXPOSE_PORT}' -q | xargs -r docker rm -f"

    - sshpass -p $DEPLOYMENT_PASSWORD ssh -oStrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "echo ${DEPLOYMENT_PASSWORD} | sudo -S docker stop $DOCKER_CONTAINER; sudo docker rm $DOCKER_CONTAINER;sudo docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD; sudo docker pull ${IMAGE_NAME}; sudo docker run -dit --name $DOCKER_CONTAINER -p $EXPOSE_PORT:80 --restart always ${IMAGE_NAME}"
    - echo "deploy concluÃ­do com sucesso para o ambiente ${CI_ENVIRONMENT_NAME}..."
    - echo "echo ${DEPLOYMENT_PASSWORD} | sudo -S docker stop $DOCKER_CONTAINER; sudo docker rm $DOCKER_CONTAINER; sudo docker pull ${IMAGE_NAME}; sudo docker run -dit --name $DOCKER_CONTAINER -p $EXPOSE_PORT:80 --restart always ${IMAGE_NAME}"

deploy-release-application:
  <<: *deploy-application
  before_script:
    - apk add --update --no-cache openssh sshpass
    - source .env.staging
  environment:
    name: Staging
    url: $ENVIRONMENT_URL:$EXPOSE_PORT
  needs:
    - publish-staging-docker-image
  only:
    - /^release.*$/

deploy-production-application:
  <<: *deploy-application
  before_script:
    - apk add --update --no-cache openssh sshpass
    - source .env.production
  environment:
    name: Production
    url: $ENVIRONMENT_URL:$EXPOSE_PORT
  needs:
    - publish-production-docker-image
  only:
    - main
